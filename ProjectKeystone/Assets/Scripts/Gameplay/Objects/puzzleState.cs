using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// A Gameplay Object Class that tracks the current state of puzzle in play.
/// </summary>
public class PuzzleState
{
    public bool isInPlay;
    int _matchPointGoalQuota;
    float _timeLeft;
    float TimeLeft { get => _timeLeft; }
    int _tilePointScoreValue;
    PuzzleNextMatchQueue _puzzleNextMatchQueue;
    public PuzzleNextMatchQueue PuzzleNextMatchQueue { get => _puzzleNextMatchQueue; } 

    public List<PuzzlePlayer> puzzlePlayers;

    public PuzzleState(int numberOfPlayers, int matchClearScore, float timeLimit)
    {
        isInPlay = true;
        _matchPointGoalQuota = matchClearScore;
        _timeLeft = timeLimit;
        //This will later be modified by difficulty
        _tilePointScoreValue = 100;
        puzzlePlayers = new List<PuzzlePlayer>(1);
        for (int x = 0; x < numberOfPlayers; x++)
        {
            PuzzlePlayer newPlayer = new PuzzlePlayer();
            puzzlePlayers.Add(newPlayer);
        }
        _puzzleNextMatchQueue = new PuzzleNextMatchQueue();
    }

    /// <summary>
    /// Calculates the amount of score points generated by a successful match and subsequent clear.
    /// </summary>
    /// <param name="tilesCleared">The number of matchReady PuzzleTile objects to "clear."</param>
    /// <param name="comboCount">The player's current combo count.</param>
    /// <param name="keysUsedCount">The player's number of consecutive keys used in a combo.</param>
    /// <returns></returns>
    public int CalculateScorePoints(int tilesCleared, int comboCount, int keysUsedCount)
    {
        int result = 0;
        //100t * n * m
        result = ((_tilePointScoreValue * tilesCleared) * comboCount) * keysUsedCount;
        return result;
    }

    /// <summary>
    /// Adjusts the score points of the specified player.
    /// </summary>
    /// <param name="player">The player's points to be adjusted.</param>
    /// <param name="amount">The amount of points (positive or negitive) to adjust a player's score points by.</param>
    public void AddScorePointsToPlayer(int player, int amount)
    {
        puzzlePlayers[player].AddScorePoint(amount);
    }

    /// <summary>
    /// Adjusts the remaining time limit for the current puzzle.
    /// </summary>
    /// <param name="amount"></param>
    public void AdjustTimeLeft(float amount)
    {
        _timeLeft += amount;
        CheckTimeOver();
    }

    /// <summary>
    /// Checks if the puzzle has run out of time, ending the game.
    /// </summary>
    private void CheckTimeOver()
    {
        if(_timeLeft <= 0)
        {
            //Time Up!
            isInPlay = false;
            Debug.Log("Game Over! P1 Final Socre: " + puzzlePlayers[0].playerScorePoint.ToString());

        }
    }

    //
    //Difficulty modifiers:
    //Allowed MatchTypes
    //Allowed "Keys"
    ///"Key" Appearance weighting
    //Puzzle size? (Move from Puzzle Game Object?)

    //Holds the "shape queue" and "Next Shape"
    

}
